@page "/"
@inject StorageService service

<PageTitle>Kazoku event - Start</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="d-flex justify-content-between align-items-center">
            <h1>Välkommen till Kazoku event!</h1>
            <a class="btn btn-success" href="/" @onclick="() => ModalShow(null)">Skapa event</a>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Välkommen till Kazoku event!</h1>
    </NotAuthorized>
</AuthorizeView>

<p>Nedan hittar du alla event på Kazoku.</p>

@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">@(currentEvent is not null ? currentEvent.Name : "Skapa event")</h4>
                    @* <button type="button" class="close" @onclick="@ModalCancel">&times;</button> *@
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <Website.Components.Events.Form currentEvent="@currentEvent"  />
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ModalCancel">Avbryt</button>
                    <button type="button" class="btn btn-danger" @onclick=@ModalOk>Spara</button>
                </div>

            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


    @if (events.Count > 0)
    {
        <ul>
            @foreach (var theEvent in events)
            {
                <Website.Components.Events.Accordion CurrentEvent="@theEvent" />
            }
        </ul>
    }
    else
    {
        <hr />
        <p>Inga event tillgängliga just nu.</p>
    }



<hr />
<h3>Sugen på mer?</h3>
<p>Hör av dig till oss.</p>

<p class="text-white">Fikus.</p>

@code 
{
    List<Event> events = new List<Event>();
    Event? currentEvent = new Event();
    bool showModal = false;

    void ModalShow(Event? inputEvent)
    {
        if (inputEvent is not null)
        {
            currentEvent = inputEvent;
        }

        showModal = true;
    }

    void ModalCancel() => showModal = false;
    async void ModalOk()
    {
        showModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        events = await service.GetEventsAsync();
        events = events.OrderBy(e => e.Date).ToList();
    }
}