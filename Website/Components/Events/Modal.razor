@inject StorageService storage
@inject NavigationManager uriHelper;

<div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">@(string.IsNullOrEmpty(currentEvent.Name) ? "Skapa event" : $"Redigera {currentEvent.Name}")</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <EditForm id="@EventForm" Model="@currentEvent" OnSubmit="@SubmitForm">
                    <div class="form-group">
                        <label>Namn:</label>
                        <InputText class="form-control" id="name" @bind-Value="currentEvent.Name" />
                    </div>
                    <div class="form-group">
                        <label>Beskrivning:</label>
                        <InputTextArea class="form-control" id="description" @bind-Value="currentEvent.Description" />
                    </div>
                    <div class="form-group">
                        <label>Plats:</label>
                        <InputText class="form-control" id="location" @bind-Value="currentEvent.Location" />
                    </div>
                    <div class="form-group">
                        <label>Datum:</label>
                        <InputDate class="form-control" id="date" @bind-Value="currentEvent.Date" />
                    </div>
                    <div class="form-group">
                        <label>Deadline:</label>
                        <InputDate class="form-control" id="deadline" @bind-Value="currentEvent.Deadline" />
                    </div>
                </EditForm>
            </div>
            <!-- Modal footer -->
            <div class="modal-footer">
                <button class="btn btn-outline-secondary" @onclick="HideModal">
                    Avbryt
                </button>
                <button type="submit" form="@EventForm" class="btn btn-primary">
                    Spara
                    </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Event currentEvent { get; set; }

    [Parameter]
    public EventCallback onHideModal { get; set; }

    private string EventForm = "EventForm";

    private async void SubmitForm()
    {
        Guid guid = Guid.NewGuid();
        try
        {
            var theEvent = new Event
                {
                    Id = guid.ToString(),
                    Name = currentEvent.Name,
                    Description = currentEvent.Description,
                    Location = currentEvent.Location,
                    Date = currentEvent.Date,
                    Deadline = currentEvent.Deadline,
                    MaxParticipants = 4
                };

            await storage.InsertEventAsync(theEvent);
            HideModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
    
    private async void Save()
    {
    }

    protected async Task HideModal()
    {
        await onHideModal.InvokeAsync();
    }
}
