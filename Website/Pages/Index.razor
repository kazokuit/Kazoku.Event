@page "/"
@inject StorageService service
@inject NavigationManager uriHelper;

<PageTitle>Kazoku event - Start</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <h1>Välkommen till Kazoku event!</h1>
    </NotAuthorized>
    <Authorized>
        <div class="d-flex justify-content-between align-items-center">
            <h1>Välkommen till Kazoku event!</h1>
            <a class="btn btn-success" href="/" @onclick="() => ModalShow(null)">Skapa event</a>
        </div>
    </Authorized>
</AuthorizeView>

<p>Nedan hittar du alla event på Kazoku.</p>

@if (showModal)
{
    <Website.Components.Events.Modal CurrentEvent="@currentEvent" onHideModal="ModalCancel" onAddedEvent="AddedEvent" />
    <div class="modal-backdrop fade show"></div>
}

@if (events.Count > 0)
{
    <div class="accordion" id="eventList">
        @foreach (var loopEvent in events)
        {
            <Website.Components.Events.Accordion CurrentEvent="@loopEvent" onDeleteEvent="@DeleteEvent" />
        }
    </div>
}
else
{
    <hr />
    <p>Inga event tillgängliga just nu.</p>
}

<hr />
<h3>Sugen på mer?</h3>
<p>Hör av dig till oss.</p>

<p class="text-white">Fikus.</p>

@code 
{
    List<Event> events = new List<Event>();
    Event? currentEvent = null;
    bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        events = await service.GetEventsAsync();
        events = SortEvents(events);
    }

    private void ModalShow(Event? inputEvent)
    {
        if (inputEvent is not null)
        {
            currentEvent = inputEvent;
        }
        else 
        {
            currentEvent = new Event();
        }

        showModal = true;
    }

    private void ModalCancel() => showModal = false;

    protected async Task AddedEvent (Event newEvent)
    {
        ModalCancel();
        events.Add(newEvent);
        events = SortEvents(events);
        StateHasChanged();
    }

    private async Task DeleteEvent(Event currEvent)
    {
        await service.DeleteEventAsync(currEvent);
        events.Remove(currEvent);

        StateHasChanged();
    }

    private List<Event> SortEvents(List<Event> inEvents)
    {
        return inEvents.OrderBy(e => e.Date).ToList();
    }
}